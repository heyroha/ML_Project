{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b24fb933",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2023-12-01T12:12:57.301863Z",
     "iopub.status.busy": "2023-12-01T12:12:57.301195Z",
     "iopub.status.idle": "2023-12-01T12:12:57.737630Z",
     "shell.execute_reply": "2023-12-01T12:12:57.736236Z"
    },
    "papermill": {
     "duration": 0.445747,
     "end_time": "2023-12-01T12:12:57.740525",
     "exception": false,
     "start_time": "2023-12-01T12:12:57.294778",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/big-data-analytics-certification/t2-2-y_train.csv\n",
      "/kaggle/input/big-data-analytics-certification/t1-data1.csv\n",
      "/kaggle/input/big-data-analytics-certification/t2-2-X_train.csv\n",
      "/kaggle/input/big-data-analytics-certification/t2-1-sample_submission.csv\n",
      "/kaggle/input/big-data-analytics-certification/t1-data2.csv\n",
      "/kaggle/input/big-data-analytics-certification/t2-1-test.csv\n",
      "/kaggle/input/big-data-analytics-certification/t2-2-X_test.csv\n",
      "/kaggle/input/big-data-analytics-certification/t2-1-train.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d044618c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-12-01T12:12:57.753352Z",
     "iopub.status.busy": "2023-12-01T12:12:57.752767Z",
     "iopub.status.idle": "2023-12-01T12:12:57.799057Z",
     "shell.execute_reply": "2023-12-01T12:12:57.797768Z"
    },
    "papermill": {
     "duration": 0.054872,
     "end_time": "2023-12-01T12:12:57.802016",
     "exception": false,
     "start_time": "2023-12-01T12:12:57.747144",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "x_test = pd.read_csv('../input/big-data-analytics-certification/t2-2-X_test.csv')\n",
    "x_train = pd.read_csv('../input/big-data-analytics-certification/t2-2-X_train.csv')\n",
    "y_train = pd.read_csv('../input/big-data-analytics-certification/t2-2-y_train.csv')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6db2271d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-12-01T12:12:57.812596Z",
     "iopub.status.busy": "2023-12-01T12:12:57.812180Z",
     "iopub.status.idle": "2023-12-01T12:12:57.819714Z",
     "shell.execute_reply": "2023-12-01T12:12:57.818905Z"
    },
    "papermill": {
     "duration": 0.015773,
     "end_time": "2023-12-01T12:12:57.822209",
     "exception": false,
     "start_time": "2023-12-01T12:12:57.806436",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((80, 8), (320, 8), (320, 2))"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test.shape, x_train.shape,y_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a7096823",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-12-01T12:12:57.833135Z",
     "iopub.status.busy": "2023-12-01T12:12:57.832650Z",
     "iopub.status.idle": "2023-12-01T12:12:57.886436Z",
     "shell.execute_reply": "2023-12-01T12:12:57.885296Z"
    },
    "papermill": {
     "duration": 0.062465,
     "end_time": "2023-12-01T12:12:57.889180",
     "exception": false,
     "start_time": "2023-12-01T12:12:57.826715",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 320 entries, 0 to 319\n",
      "Data columns (total 8 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   Serial No.         320 non-null    int64  \n",
      " 1   GRE Score          320 non-null    int64  \n",
      " 2   TOEFL Score        320 non-null    int64  \n",
      " 3   University Rating  320 non-null    int64  \n",
      " 4   SOP                320 non-null    float64\n",
      " 5   LOR                320 non-null    float64\n",
      " 6   CGPA               320 non-null    float64\n",
      " 7   Research           320 non-null    int64  \n",
      "dtypes: float64(3), int64(5)\n",
      "memory usage: 20.1 KB\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 80 entries, 0 to 79\n",
      "Data columns (total 8 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   Serial No.         80 non-null     int64  \n",
      " 1   GRE Score          80 non-null     int64  \n",
      " 2   TOEFL Score        80 non-null     int64  \n",
      " 3   University Rating  80 non-null     int64  \n",
      " 4   SOP                80 non-null     float64\n",
      " 5   LOR                80 non-null     float64\n",
      " 6   CGPA               80 non-null     float64\n",
      " 7   Research           80 non-null     int64  \n",
      "dtypes: float64(3), int64(5)\n",
      "memory usage: 5.1 KB\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 320 entries, 0 to 319\n",
      "Data columns (total 2 columns):\n",
      " #   Column            Non-Null Count  Dtype  \n",
      "---  ------            --------------  -----  \n",
      " 0   Serial No.        320 non-null    int64  \n",
      " 1   Chance of Admit   320 non-null    float64\n",
      "dtypes: float64(1), int64(1)\n",
      "memory usage: 5.1 KB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(None, None, None)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train.info(),x_test.info(),y_train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5d0ffe66",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-12-01T12:12:57.900391Z",
     "iopub.status.busy": "2023-12-01T12:12:57.899917Z",
     "iopub.status.idle": "2023-12-01T12:12:57.916765Z",
     "shell.execute_reply": "2023-12-01T12:12:57.915609Z"
    },
    "papermill": {
     "duration": 0.025339,
     "end_time": "2023-12-01T12:12:57.919356",
     "exception": false,
     "start_time": "2023-12-01T12:12:57.894017",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Serial No.</th>\n",
       "      <th>Chance of Admit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>207</td>\n",
       "      <td>0.63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>14</td>\n",
       "      <td>0.62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>119</td>\n",
       "      <td>0.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>243</td>\n",
       "      <td>0.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>236</td>\n",
       "      <td>0.88</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Serial No.  Chance of Admit \n",
       "0         207              0.63\n",
       "1          14              0.62\n",
       "2         119              0.47\n",
       "3         243              0.70\n",
       "4         236              0.88"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e3644fff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-12-01T12:12:57.931925Z",
     "iopub.status.busy": "2023-12-01T12:12:57.931543Z",
     "iopub.status.idle": "2023-12-01T12:12:57.938761Z",
     "shell.execute_reply": "2023-12-01T12:12:57.937527Z"
    },
    "papermill": {
     "duration": 0.016677,
     "end_time": "2023-12-01T12:12:57.941330",
     "exception": false,
     "start_time": "2023-12-01T12:12:57.924653",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Serial No.', 'Chance of Admit '], dtype='object')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "52880a8e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-12-01T12:12:57.955203Z",
     "iopub.status.busy": "2023-12-01T12:12:57.954594Z",
     "iopub.status.idle": "2023-12-01T12:13:00.015094Z",
     "shell.execute_reply": "2023-12-01T12:13:00.013715Z"
    },
    "papermill": {
     "duration": 2.071128,
     "end_time": "2023-12-01T12:13:00.017679",
     "exception": false,
     "start_time": "2023-12-01T12:12:57.946551",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.6672818802408083\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NO.</th>\n",
       "      <th>Chance of Admit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>128</td>\n",
       "      <td>0.7116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>76</td>\n",
       "      <td>0.7449</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>151</td>\n",
       "      <td>0.9238</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>102</td>\n",
       "      <td>0.6515</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>272</td>\n",
       "      <td>0.5078</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   NO.  Chance of Admit\n",
       "0  128           0.7116\n",
       "1   76           0.7449\n",
       "2  151           0.9238\n",
       "3  102           0.6515\n",
       "4  272           0.5078"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# #데이터 처리 - 컬럼제거\n",
    "NO = x_test['Serial No.'].copy()\n",
    "\n",
    "x_train = x_train.drop(columns =['Serial No.'])\n",
    "x_test = x_test.drop(columns =['Serial No.'])\n",
    "\n",
    "#데이터 분리\n",
    "from sklearn.model_selection import train_test_split\n",
    "xtr, xval, ytr, yval = train_test_split(x_train,\n",
    "                                       y_train['Chance of Admit '],\n",
    "                                       test_size = 0.3,\n",
    "                                       random_state = 0xC0FFEE)\n",
    "\n",
    "#데이터모델링\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "rf = RandomForestRegressor(random_state = 0xC0FFEE)\n",
    "rf.fit(xtr,ytr)\n",
    "y_val_pred = rf.predict(xval)\n",
    "\n",
    "from sklearn.metrics import r2_score\n",
    "\n",
    "r2 = r2_score(yval,y_val_pred)\n",
    "print(r2)\n",
    "\n",
    "#모델 적용\n",
    "y_result = rf.predict(x_test)\n",
    "result = pd.DataFrame({'NO.':NO,'Chance of Admit':y_result})\n",
    "result[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "22465331",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-12-01T12:06:31.723651Z",
     "iopub.status.busy": "2023-12-01T12:06:31.723171Z",
     "iopub.status.idle": "2023-12-01T12:06:31.758255Z",
     "shell.execute_reply": "2023-12-01T12:06:31.757016Z",
     "shell.execute_reply.started": "2023-12-01T12:06:31.723615Z"
    },
    "papermill": {
     "duration": 0.005233,
     "end_time": "2023-12-01T12:13:00.028606",
     "exception": false,
     "start_time": "2023-12-01T12:13:00.023373",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4b8fb62f",
   "metadata": {
    "papermill": {
     "duration": 0.004929,
     "end_time": "2023-12-01T12:13:00.038896",
     "exception": false,
     "start_time": "2023-12-01T12:13:00.033967",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 3872098,
     "sourceId": 37158,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30587,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6.986509,
   "end_time": "2023-12-01T12:13:00.667030",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2023-12-01T12:12:53.680521",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
